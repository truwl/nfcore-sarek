{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/sarek/master/nextflow_schema.json",
    "title": "nf-core/sarek pipeline parameters",
    "description": "An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": [
                "step",
                "input",
                "outdir"
            ],
            "properties": {
                "step": {
                    "type": "string",
                    "default": "mapping",
                    "fa_icon": "fas fa-play",
                    "description": "Starting step.",
                    "help_text": "Only one step.",
                    "enum": [
                        "mapping",
                        "markduplicates",
                        "prepare_recalibration",
                        "recalibrate",
                        "variant_calling",
                        "annotate",
                        "controlfreec"
                    ]
                },
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "\\.csv$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with a header row. See [usage docs](https://nf-co.re/sarek/usage#input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                }
            },
            "help_text": ""
        },
        "main_options": {
            "title": "Main options",
            "type": "object",
            "description": "Option used for most of the pipeline.",
            "default": "",
            "properties": {
                "tools": {
                    "type": "string",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Tools to use for variant calling and/or for annotation.",
                    "help_text": "Multiple separated with commas.\n\nGermline variant calling can currently only be performed with the following variant callers:\n- FreeBayes, HaplotypeCaller, Manta, mpileup, Strelka, TIDDIT\n\nSomatic variant calling can currently only be performed with the following variant callers:\n- ASCAT, Control-FREEC, FreeBayes, Manta, MSIsensorpro, Mutect2, Strelka\n\n**NB** Mutect2 for somatic variant calling cannot be combined with `--no_intervals`\n\nTumor-only somatic variant calling can currently only be performed with the following variant callers:\n- Control-FREEC, Manta, mpileup, Mutect2, TIDDIT\n\nAnnotation is done using snpEff, VEP, or even both consecutively.\n\n> **NB** As Sarek will use bgzip and tabix to compress and index VCF files annotated, it expects VCF files to be sorted.\n\n\n\n`DNAseq`, `DNAscope` and `TNscope` are only available with `--sentieon`\n\n> **NB** tools can be specified with no concern for case.",
                    "pattern": "^((ascat|cnvkit|controlfreec|deepvariant|dnascope|dnaseq|freebayes|haplotypecaller|manta|merge|mpileup|msisensorpro|mutect2|snpeff|strelka|tiddit|tnscope|vep)*,?)*$"
                },
                "no_intervals": {
                    "type": "boolean",
                    "fa_icon": "fas fa-ban",
                    "description": "Disable usage of intervals.",
                    "help_text": "Intervals are part of the genome chopped up, used to speed up preprocessing and variant calling. Cannot be combined with `--tools mutect2`"
                },
                "nucleotides_per_second": {
                    "type": "number",
                    "fa_icon": "fas fa-clock",
                    "description": "Estimate interval size.",
                    "help_text": "Intervals are part of the genome chopped up, used to speed up preprocessing and variant calling.",
                    "default": 1000
                },
                "sentieon": {
                    "type": "boolean",
                    "fa_icon": "fas fa-tools",
                    "description": "Enable Sentieon if available.",
                    "help_text": "Sentieon is a commercial solution to process genomics data with high computing efficiency, fast turnaround time, exceptional accuracy, and 100% consistency.\n\n> **NB** Adds the following tools for the `--tools` options: `DNAseq`, `DNAscope` and `TNscope`."
                },
                "skip_tools": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Disable specified tools.",
                    "help_text": "Multiple tools can be specified, separated by commas.\n\n> **NB** `--skip_tools baserecalibrator_report` is actually just not saving the reports.\n> **NB** `--skip_tools markduplicates_report` does not skip `MarkDuplicates` but prevent the collection of duplicate metrics that slows down performance.\n> **NB** tools can be specified with no concern for case.",
                    "pattern": "^((bamqc|baserecalibrator|baserecalibrator_report|bcftools|documentation|fastqc|markduplicates|markduplicates_report|multiqc|samtools|vcftools|versions|deeptools)*(,)*)*$"
                },
                "target_bed": {
                    "type": "string",
                    "format": "file-path",
                    "pattern": "\\.bed$",
                    "fa_icon": "fas fa-crosshairs",
                    "description": "Target BED file for whole exome or targeted sequencing.",
                    "help_text": "This parameter does _not_  imply that the workflow is running alignment or variant calling only for the supplied targets.\nInstead, we are aligning for the whole genome, and selecting variants only at the very end by intersecting with the provided target file.\nAdding every exon as an interval in case of `WES` can generate >200K processes or jobs, much more forks, and similar number of directories in the Nextflow work directory.\nFurthermore, primers and/or baits are not 100% specific, (certainly not for MHC and KIR, etc.), quite likely there going to be reads mapping to multiple locations.\nIf you are certain that the target is unique for your genome (all the reads will certainly map to only one location), and aligning to the whole genome is an overkill, it is actually better to change the reference itself.\n\nThe recommended flow for targeted sequencing data is to use the workflow as it is, but also provide a `BED` file containing targets for all steps using the `--target_bed` option.\nThe workflow will pick up these intervals, and activate any `--exome` flag in any tools that allow it to process deeper coverage.\nIt is advised to pad the variant calling regions (exons or target) to some extent before submitting to the workflow."
                },
                "wes": {
                    "type": "boolean",
                    "fa_icon": "fas fa-dna",
                    "description": "Enable when exome or panel data is provided."
                }
            },
            "fa_icon": "fas fa-user-cog"
        },
        "trim_split_fastq": {
            "title": "Trim/split FASTQ",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fas fa-cut",
            "properties": {
                "trim_fastq": {
                    "type": "boolean",
                    "fa_icon": "fas fa-cut",
                    "description": "Run Trim Galore.",
                    "help_text": "Use this to perform adapter trimming with Trim Galore.\ncf [Trim Galore User Guide](https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md).",
                    "hidden": true
                },
                "clip_r1": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 5' end of read 1.",
                    "help_text": "This may be useful if the qualities were very poor, or if there is some sort of unwanted bias at the 5' end.",
                    "hidden": true
                },
                "clip_r2": {
                    "type": "integer",
                    "default": 0,
                    "description": "Remove bp from the 5' end of read 2.",
                    "help_text": "This may be useful if the qualities were very poor, or if there is some sort of unwanted bias at the 5' end.",
                    "fa_icon": "fas fa-cut",
                    "hidden": true
                },
                "three_prime_clip_r1": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.",
                    "help_text": "This may remove some unwanted bias from the 3' end that is not directly related to adapter sequence or basecall quality.",
                    "hidden": true
                },
                "three_prime_clip_r2": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed.",
                    "help_text": "This may remove some unwanted bias from the 3' end that is not directly related to adapter sequence or basecall quality.",
                    "hidden": true
                },
                "trim_nextseq": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Apply the --nextseq=X option, to trim based on quality after removing poly-G tails.",
                    "help_text": "This may remove some unwanted bias from the 3' end that is not directly related to adapter sequence or basecall quality.",
                    "hidden": true
                },
                "save_trimmed": {
                    "type": "boolean",
                    "fa_icon": "fas fa-save",
                    "description": "Save trimmed FastQ file intermediates.",
                    "hidden": true
                },
                "split_fastq": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Specify how many reads each split of a FastQ file contains. Set 0 to turn of splitting at all.",
                    "help_text": "Use the the tools seqkit/split2 to split FASTQ file by number of reads.",
                    "hidden": true
                },
                "save_split_fastqs": {
                    "type": "boolean",
                    "fa_icon": "fas fa-vial",
                    "description": "If set, publishes split FASTQ files. Intended for testing purposes.",
                    "hidden": true
                },
                "umi_read_structure": {
                    "type": "string",
                    "fa_icon": "fas fa-tape",
                    "hidden": true
                },
                "group_by_umi_strategy": {
                    "type": "string",
                    "default": "Adjacency",
                    "hidden": true
                }
            }
        },
        "preprocessing": {
            "title": "Preprocessing",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "aligner": {
                    "type": "string",
                    "default": "bwa-mem",
                    "fa_icon": "fas fa-puzzle-piece",
                    "enum": [
                        "bwa-mem",
                        "bwa-mem2",
                        "dragmap"
                    ],
                    "description": "Specify aligner to be used to map reads to reference genome.",
                    "help_text": "> **WARNING** Current indices for `bwa` in AWS iGenomes are not compatible with `bwa-mem2` and `dragmap`.\n> `Sarek` will build them automatically if not provided.\n\n> **WARNING** BWA-mem2 is in active development\n> Sarek might not be able to require the right amount of resources for it at the moment\n> We recommend to use pre-built indexes.",
                    "hidden": true
                },
                "use_gatk_spark": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Tools for which to enable usage of GATK Spark implementation.",
                    "help_text": "Multiple separated with commas.\n\n GATK4 BQSR tools are currently only available as Beta release. Use with caution!",
                    "pattern": "^((baserecalibrator|markduplicates)*,?)*$"
                },
                "save_bam_mapped": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Save Mapped BAMs."
                }
            }
        },
        "variant_calling": {
            "title": "Variant Calling",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "only_paired_variant_calling": {
                    "type": "boolean",
                    "fa_icon": "fas fa-angle-double-right",
                    "description": "If true, skips germline variant calling for matched normal to tumor sample. Normal samples without matched tumor will still be processed through germline variant calling tools."
                },
                "ploidy": {
                    "type": "number",
                    "fa_icon": "fas fa-bacon",
                    "default": 2,
                    "description": "genome ploidy; In case of doubt, you can set different values and Control-FREEC will select the one that explains most observed CNAs.",
                    "hidden": true
                },
                "ascat_purity": {
                    "type": "number",
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite ASCAT purity.",
                    "help_text": "Requires that `--ascat_ploidy` is set."
                },
                "cf_coeff": {
                    "type": "number",
                    "default": 0.05,
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite Control-FREEC coefficientOfVariation",
                    "hidden": true
                },
                "cf_contamination_adjustment": {
                    "type": "boolean",
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite Control-FREEC contaminationAdjustement",
                    "hidden": true
                },
                "cf_contamination": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-wrench",
                    "description": "Design known contamination value for Control-FREEC",
                    "hidden": true
                },
                "cf_minqual": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-greater-than",
                    "hidden": true,
                    "description": "Minimal sequencing quality for a position to be considered in BAF analysis."
                },
                "cf_mincov": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-align-center",
                    "hidden": true,
                    "description": "Minimal read coverage for a position to be considered in BAF analysis."
                },
                "cf_window": {
                    "type": "number",
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite Control-FREEC window size.",
                    "help_text": "It is recommended to use a window size of 0 for exome data.",
                    "hidden": true
                },
                "joint_germline": {
                    "type": "boolean",
                    "fa_icon": "fas fa-align-justify",
                    "description": "Enables GATK4 joint germline variant calling, if also haplotypecaller is selected."
                },
                "generate_gvcf": {
                    "type": "boolean",
                    "fa_icon": "fas fa-copy",
                    "description": "Generate g.vcf output from GATK HaplotypeCaller."
                },
                "no_strelka_bp": {
                    "type": "boolean",
                    "fa_icon": "fas fa-ban",
                    "description": "Will not use Manta candidateSmallIndels for Strelka.",
                    "help_text": "Not recommended by Best Practices."
                },
                "pon": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Panel-of-normals VCF (bgzipped) for GATK Mutect2 / Sentieon TNscope.",
                    "help_text": "Without PON, there will be no calls with PASS in the INFO field, only an unfiltered VCF is written.\nIt is recommended to make your own PON, as it depends on sequencer and library preparation.\nFor tests in iGenomes there is a dummy PON file in the Annotation/GermlineResource directory, but it should not be used as a real PON file.\n\nSee [PON documentation](https://gatk.broadinstitute.org/hc/en-us/articles/360042479112-CreateSomaticPanelOfNormals-BETA)\n> **NB** PON file should be bgzipped."
                },
                "pon_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Index of PON panel-of-normals VCF.",
                    "help_text": "If none provided, will be generated automatically from the PON bgzipped VCF file."
                },
                "ignore_soft_clipped_bases": {
                    "type": "boolean",
                    "fa_icon": "fas fa-ban",
                    "description": "Do not analyze soft clipped bases in the reads for GATK Mutect2.",
                    "help_text": "use the `--dont-use-soft-clipped-bases` params with GATK."
                }
            }
        },
        "annotation": {
            "title": "Annotation",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "vep_dbnsfp": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP dbNSFP plugin.",
                    "hidden": true
                },
                "dbnsfp": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to dbNSFP processed file.",
                    "help_text": "To be used with `--vep_dbnsfp`.",
                    "hidden": true
                },
                "dbnsfp_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to dbNSFP tabix indexed file.",
                    "help_text": "To be used with `--vep_dbnsfp`.",
                    "hidden": true
                },
                "vep_loftee": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP LOFTEE plugin.",
                    "hidden": true
                },
                "vep_spliceai": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP SpliceAI plugin.",
                    "hidden": true
                },
                "spliceai_snv": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to spliceai raw scores snv file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_snv_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to spliceai raw scores snv tabix indexed file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_indel": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to spliceai raw scores indel file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_indel_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to spliceai raw scores indel tabix indexed file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "vep_spliceregion": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP SpliceRegion plugin.",
                    "hidden": true
                },
                "annotation_cache": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of cache for annotation.",
                    "help_text": "And disable usage of Sarek snpeff and vep specific containers for annotation\n\nTo be used with `--snpeff_cache` and/or `--vep_cache`.",
                    "hidden": true
                },
                "snpeff_cache": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to snpEff cache.",
                    "help_text": "To be used with `--annotation_cache`.",
                    "hidden": true
                },
                "vep_cache": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to VEP cache.",
                    "help_text": "To be used with `--annotation_cache`.",
                    "hidden": true
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "default": "GATK.GRCh38",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`.\n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details."
                },
                "ac_loci": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT loci file."
                },
                "ac_loci_gc": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT GC correction file."
                },
                "bwa": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to BWA mem indices.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs."
                },
                "bwamem2": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to bwa-mem2 mem indices.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the FASTA reference, if `--aligner bwa-mem2` is specified. Combine with `--save_reference` to save for future runs."
                },
                "chr_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to chromosomes folder."
                },
                "dbsnp": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbsnp file."
                },
                "dbsnp_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbsnp index.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the dbsnp file. Combine with `--save_reference` to save for future runs."
                },
                "dict": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to FASTA dictionary file.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs."
                },
                "dragmap": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to dragmap indices.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the FASTA reference, if `--aligner dragmap` is specified. Combine with `--save_reference` to save for future runs."
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "pattern": "\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "fasta_fai": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "help_text": "> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs.",
                    "description": "Path to FASTA reference index."
                },
                "germline_resource": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to GATK Mutect2 Germline Resource File.",
                    "help_text": "The germline resource VCF file (bgzipped and tabixed) needed by GATK4 Mutect2 is a collection of calls that are likely present in the sample, with allele frequencies.\nThe AF info field must be present.\nYou can find a smaller, stripped gnomAD VCF file (most of the annotation is removed and only calls signed by PASS are stored) in the AWS iGenomes Annotation/GermlineResource folder."
                },
                "germline_resource_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to GATK Mutect2 Germline Resource Index.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the Germline Resource file, if provided. Combine with `--save_reference` to save for future runs."
                },
                "intervals": {
                    "type": "string",
                    "fa_icon": "fas fa-file-alt",
                    "help_text": "To speed up some preprocessing and variant calling processes, the reference is chopped into smaller pieces.\nThe intervals are chromosomes cut at their centromeres (so each chromosome arm processed separately) also additional unassigned contigs.\nWe are ignoring the `hs37d5` contig that contains concatenated decoy sequences.\nParts of preprocessing and variant calling are done by these intervals, and the different resulting files are then merged.\nThis can parallelize processes, and push down wall clock time significantly.\n\nThe calling intervals can be defined using a .list or a BED file.\nA .list file contains one interval per line in the format `chromosome:start-end` (1-based coordinates).\nA BED file must be a tab-separated text file with one interval per line.\nThere must be at least three columns: chromosome, start, and end (0-based coordinates).\nAdditionally, the score column of the BED file can be used to provide an estimate of how many seconds it will take to call variants on that interval.\nThe fourth column remains unused.\n\n```\n|chr1|10000|207666|NA|47.3|\n```\nThis indicates that variant calling on the interval chr1:10001-207666 takes approximately 47.3 seconds.\n\nThe runtime estimate is used in two different ways.\nFirst, when there are multiple consecutive intervals in the file that take little time to compute, they are processed as a single job, thus reducing the number of processes that needs to be spawned.\nSecond, the jobs with largest processing time are started first, which reduces wall-clock time.\nIf no runtime is given, a time of 1000 nucleotides per second is assumed.\nActual figures vary from 2 nucleotides/second to 30000 nucleotides/second.\nIf you prefer, you can specify the full path to your reference genome when you run the pipeline:\n\n> **NB** If none provided, will be generated automatically from the FASTA reference\n> **NB** Use --no_intervals to disable automatic generation.",
                    "description": "Path to intervals file."
                },
                "known_indels": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to known indels file."
                },
                "known_indels_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to known indels file index.",
                    "help_text": "> **NB** If none provided, will be generated automatically from the known index file, if provided. Combine with `--save_reference` to save for future runs."
                },
                "mappability": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to Control-FREEC mappability file."
                },
                "snpeff_db": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "snpEff DB version."
                },
                "snpeff_genome": {
                    "type": "string",
                    "fa_icon": "fas fa-microscope",
                    "description": "snpeff genome.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "vep_genome": {
                    "type": "string",
                    "fa_icon": "fas fa-microscope",
                    "description": "VEP genome.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "vep_species": {
                    "type": "string",
                    "fa_icon": "fas fa-microscope",
                    "description": "VEP species.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "vep_cache_version": {
                    "type": "number",
                    "fa_icon": "fas fa-tag",
                    "description": "VEP cache version.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "save_reference": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Save built references."
                },
                "igenomes_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Directory / URL base for iGenomes references.",
                    "default": "s3://ngi-igenomes/igenomes/",
                    "fa_icon": "fas fa-cloud-download-alt"
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "help_text": "Do not load `igenomes.config` when running the pipeline.\nYou may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`.\n\n> **NB** You can then run `Sarek` by specifying at least a FASTA genome file."
                }
            },
            "help_text": "The pipeline config files come bundled with paths to the Illumina iGenomes reference index files.\nThe configuration is set up to use the AWS-iGenomes resource\ncf https://ewels.github.io/AWS-iGenomes/."
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "seq_center": {
                    "type": "string",
                    "fa_icon": "fas fa-university",
                    "description": "Sequencing center information to be added to read group (CN field).",
                    "hidden": true
                },
                "seq_platform": {
                    "type": "string",
                    "fa_icon": "fas fa-university",
                    "default": "ILLUMINA",
                    "description": "Sequencing platform information to be added to read group (PL field).",
                    "help_text": "Default: ILLUMINA. Will be used to create a proper header for further GATK4 downstream analysis.",
                    "hidden": true
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`."
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`."
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`."
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ],
                    "hidden": true
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                },
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "enable_conda": {
                    "type": "boolean",
                    "description": "Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.",
                    "hidden": true,
                    "fa_icon": "fas fa-bacon"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/main_options"
        },
        {
            "$ref": "#/definitions/trim_split_fastq"
        },
        {
            "$ref": "#/definitions/preprocessing"
        },
        {
            "$ref": "#/definitions/variant_calling"
        },
        {
            "$ref": "#/definitions/annotation"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}